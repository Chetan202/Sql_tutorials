/*

CLAUSE 2 
 1 ) GROUP BY 
 2 ) HAVING
 3 ) ORDER BY
 4 ) UNION 
 5 ) UNION ALL
 6 ) INTERSECT
 7 ) EXCEPT
 8 ) 
 9 ) METHOD FUN
 10 ) ROW_NUMBER()
 11 ) RANK()
 12 ) DENSE_RANK
 13 ) PARTITION BY

 14 ) 

*/

-- 1 ) HAVING ( AGGREAGATE FUN / GROUP BY ) 

--CREATE TABLE CUSTOMERS
--(
--	SNO BIGINT PRIMARY KEY IDENTITY (1,1),
--	NAME VARCHAR(100) NOT NULL,
--	AGE INT CHECK (AGE > 18) ,
--	COUNTRY VARCHAR(100) DEFAULT 'INDIA',

--	JOINING_DATE BIGINT NOT NULL,
--	MOBILE_NO DECIMAL(18,0), -- NULL
--	ADDRESS VARCHAR(MAX) NOT NULL,
--	EMAIL_ID VARCHAR(100) UNIQUE , -- NOT DUPLICATE

--	QUALIFICATION VARCHAR(100) NOT NULL,
--	MEDICAL_INSURANCE CHAR(3) NOT NULL,
--	RELIGION VARCHAR(100) NOT NULL,
--	PROFESSION VARCHAR(100) NOT NULL,
--	SALARY MONEY 
--)

--DROP TABLE CUSTOMERS

SELECT * FROM CUSTOMERS

--ALTER TABLE CUSTOMERS
--ALTER COLUMN SNO BIGINT -- PRIMARY KEY IDENTITY (1,1)
--ADD CONSTRAINT PK_Person PRIMARY KEY (ID,LastName)

--ALTER TABLE CUSTOMERS
--ADD SALARY MONEY

--ALTER TABLE only allows columns to be added that can contain nulls, or have a DEFAULT definition specified, or the column being added is an identity or timestamp column, or alternatively if none of the previous conditions are satisfied the table must be empty to allow addition of this column. Column 'SALARY' cannot be added to non-empty table 'CUSTOMERS' because it does not satisfy these conditions.


INSERT INTO CUSTOMERS
(NAME, AGE,  JOINING_DATE, MOBILE_NO, ADDRESS, EMAIL_ID, QUALIFICATION, MEDICAL_INSURANCE, RELIGION, PROFESSION,SALARY)
VALUES
--('Akshay Kodam',26,NULL,43996,9833812843,'Mira Road 311','akshay@caresoft.co.in','TYBSC (CS)','NO','INDIAN','DEVELPOPER')
--('Chetan Jha',19,43996,9664080777,'Mira Road 401107','chetan@caresoft.co.in','DIPLOMA (CS)','NO','INDIAN','LEARNER')
('Abhishek patel',26,43996,9833782843,'Malad 452','abp@caresoft.co.in','ARTS','YES','NEPAL','PROFESSOR',10000),
('RISHI',21,43996,9833812843,'BHAYANDER 311','rishi@caresoft.co.in','TYCO(CE) (CS)','NO','INDIAN','DEVELPOPER',10000),
('SANJOG BELOSE',26,43996,9833856843,'SANTACRUZ 345','Sanjog@caresoft.co.in','SYCO(IT)','NO','AFRICAN','DESIGN',50000),
('AKSHAY KUMAR',50,43996,9833812443,'DAHISAR 351','AKSHAYKUMAR@caresoft.co.in','MBA','YES','INDIAN','DEVELPOPER',40000),
('MOHAMMAD BIN KHALJI',80,43999,9833812843,'Mira Road 311','MBD@caresoft.co.in','MCA(IT) (CS)','NO','INDIAN','TESTER',1000),
('ADITA KUMAR',25,43990,9833842843,'BORIVALI 211','ADITA@caresoft.co.in','12 ','YES','INDIAN','DESIGNER',54000),
('DEEPAK KALAL',56,43995,98382125523,'LOS ANGELES 311','DK@caresoft.co.in','TYARTS(CS)','NO','INDIAN','DEVELPOPER',150000),
('Sanjay Singh',30,43920,9834561843,'Santacruz','ss@caresoft.co.in','TYMMM(MM)','YES','PAKISTAN','DBA',15000),
('Yash Farnandis',36,43996,8808812843,'Los Angles','Yash@caresoft.co.in','TYDES (GAME)','NO','AMERICAL','VIDEO EDITOR',18000),
('Rushali Kodam',28,43986,9833844443,'Nala','rushali@caresoft.co.in','TYUI(UX)','NO','US','PHOTO SHOP',20000),
('FARYAL Sequiddi',23,42296,9845798653,'CALIFORNIA','Faryal@caresoft.co.in','MSCCO(CW)','NO','UK','MEDIA',16000),
('ASHWINI BHRADKHAR',31,43944,4545212843,'Mira Bhayander','ashwini@caresoft.co.in','MCA(CS)','YES','ITALIAN','FADO UI UX',18000),
('SMITA KUMAR',36,43096,9833812354,'SKY LAND','Smita@caresoft.co.in','MBA(CS)','YES','LONDON','CEO',300000)


-- MOBILE_NO =  Arithmetic overflow error converting expression to data type int


--SELECT        TOP (200) SNO, NAME, AGE, COUNTRY, JOINING_DATE, MOBILE_NO, ADDRESS, EMAIL_ID, QUALIFICATION, MEDICAL_INSURANCE, RELIGION, PROFESSION
--FROM            CUSTOMERS


-- 1 ) GROUP BY

SELECT COUNT(SNO) AS COUNT_SAL, RELIGION
FROM CUSTOMERS
-- Column 'CUSTOMERS.RELIGION' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.

SELECT COUNT(SNO) AS COUNT_SAL, RELIGION
FROM CUSTOMERS
GROUP BY RELIGION
------------------------------------------------
SELECT COUNT(SALARY) AS COUNT_SAL, RELIGION
FROM CUSTOMERS
WHERE
SALARY > 50000
GROUP BY RELIGION

-------------------------------------------------
-- 2 ) HAVING

-- CONDITIN ON AGGRIGATE FUN HAVING

SELECT COUNT(SALARY) AS COUNT_SAL, RELIGION
FROM CUSTOMERS
WHERE
SALARY > 10000
GROUP BY RELIGION
HAVING COUNT(SALARY) > 1

---------------------------------------------------
SELECT  NAME, AGE, COUNTRY, JOINING_DATE, MOBILE_NO, ADDRESS, EMAIL_ID, QUALIFICATION, MEDICAL_INSURANCE, RELIGION, PROFESSION,COUNT(SALARY) AS COUNT_SAL
FROM CUSTOMERS
WHERE
SALARY > 50000
GROUP BY RELIGION
HAVING COUNT(SALARY) > 1

-- NOTE : ERROR
SELECT COUNT(SALARY) AS COUNT_SAL, RELIGION,SALARY
FROM CUSTOMERS
WHERE
SALARY > 50000
GROUP BY RELIGION
HAVING COUNT(SALARY) > 1

--Column 'CUSTOMERS.SALARY' is invalid in the select list because it is not contained in either an aggregate function or the GROUP BY clause.
 
 -- 3 ) DISTINCT / (NO DUPLICATES / UNIQUE )

SELECT DISTINCT COUNT(COUNTRY) AS COUNT_SAL, RELIGION
FROM CUSTOMERS
GROUP BY RELIGION

-- 4 ) ORDER BY 

-- AGGR = GROUP BY

SELECT DISTINCT COUNT(COUNTRY) AS COUNT_SAL, RELIGION
FROM CUSTOMERS
GROUP BY RELIGION
ORDER BY RELIGION DESC

-- 5 ) TOP

SELECT DISTINCT TOP 7 COUNT(COUNTRY) AS COUNT_SAL, RELIGION
FROM CUSTOMERS
GROUP BY RELIGION
ORDER BY RELIGION DESC
  
 -- 6 ) UNION

 -- SELECT DISTINCT RELIGION FROM CUSTOMERS

 SELECT RELIGION FROM CUSTOMERS
 UNION
 SELECT 'ZEMBOMBAY' AS RELIGION

 -- 7 ) UNION ALL

 SELECT RELIGION FROM CUSTOMERS
 UNION ALL
 SELECT 'ZEMBOMBAY' AS RELIGION

 -- 8 ) INTERSECT 

 SELECT cust_id FROM PRODUCT
 INTERSECT
 SELECT ID cust_id FROM SHOP

 --All queries combined using a UNION, INTERSECT or EXCEPT operator must have an equal number of expressions in their target lists.

 -- 9 ) EXCEPT
  
 SELECT cust_id FROM PRODUCT
 EXCEPT
 SELECT ID cust_id FROM SHOP

 -- 10 ) ROW_NUMBER()

 SELECT ROW_NUMBER() OVER(ORDER BY SNO) AS RN_SNO, * FROM CUSTOMERS

 -- 11 ) RANK()

 SELECT RANK() OVER(ORDER BY SALARY) AS RN_SAL, * FROM CUSTOMERS

-- SELECT RANK() OVER(ORDER BY SALARY DESC) AS RN_SAL, * FROM CUSTOMERS

 -- 12 ) DENSE_RANK()

 SELECT DENSE_RANK() OVER(ORDER BY SALARY DESC) AS RN_SAL, * FROM CUSTOMERS 

 -- 13 ) PARTITION BY ( GROUP )
  
 SELECT ROW_NUMBER() OVER(PARTITION BY MEDICAL_INSURANCE ORDER BY SALARY) AS RNP_SAL, * FROM CUSTOMERS
 
 SELECT RANK() OVER(PARTITION BY MEDICAL_INSURANCE ORDER BY SALARY) AS RP_SAL, * FROM CUSTOMERS
  
 SELECT DENSE_RANK() OVER(PARTITION BY MEDICAL_INSURANCE ORDER BY SALARY) AS RP_SAL, * FROM CUSTOMERS
 
 -----------------------------------------------------------------






















